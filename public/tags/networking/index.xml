<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>networking on Anh&#39;s Tech Blog</title>
    <link>https://blog.aaanh.com/tags/networking/</link>
    <description>Recent content in networking on Anh&#39;s Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 02 Jul 2022 00:30:00 +0000</lastBuildDate><atom:link href="https://blog.aaanh.com/tags/networking/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Google Cloud Platform Bonanza - Cloud Run</title>
      <link>https://blog.aaanh.com/posts/google-cloud-run-bonanza/</link>
      <pubDate>Sat, 02 Jul 2022 00:30:00 +0000</pubDate>
      
      <guid>https://blog.aaanh.com/posts/google-cloud-run-bonanza/</guid>
      <description>Why do you have to be this way?</description>
      <content>&lt;blockquote&gt;
&lt;p&gt;Curse-loaded rant alert.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://cloud.google.com&#34;&gt;Google Cloud Platform&lt;/a&gt; is Google&amp;rsquo;s the direct competitor to &lt;a href=&#34;azure.com&#34;&gt;Microsoft Azure&lt;/a&gt; and &lt;a href=&#34;https://aws.amazon.com&#34;&gt;Amazon AWS&lt;/a&gt;. Among the services GCP offers is the Cloud Run API. Cloud Run hosts containerized applications, APIs, and microservices while being jam-packed with features like security, access control, port forwarding, loggings, and etc.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
&lt;em&gt;Fig 1. The dashboard of a deployed Cloud Run project&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The Cloud Run service and platform are able to differentiate themselves from the others by offering a relatively modern and clean console which helps a lot with navigating through the options and functionalities. Compared to GCP, AWS and Azure seem clunky and the UI flow does not offer a clear path for a developer to deploy their projects. Most importantly, when enabling these services, AWS and Azure have complicated billing account assignment that just throws the user off track.&lt;/p&gt;
&lt;h1 id=&#34;the-spiral-into-despair-begins&#34;&gt;The spiral into despair begins&lt;/h1&gt;
&lt;p&gt;But Cloud Run is not without its own flaws. Very annoying ones at that. In my use case, I have a container of a Fresh Deno app (you can visit it &lt;a href=&#34;https://fresh.hoanganh.dev&#34;&gt;here&lt;/a&gt;) that I want to deploy with Cloud Run. It is web application framework that uses Deno (instead of node) as its runtime. Other than that, it is basically a single-page application. I started by building my container image locally and tagging with the proper scheme. Then, I used the &lt;code&gt;gcloud&lt;/code&gt; CLI to integrate the Google Container Registry with Docker so that when I push an image with the correct tagging scheme, it will be pushed to the registry without much overhead of managing accesses and tokens. Smooth sailing so far.&lt;/p&gt;
&lt;p&gt;After it has been uploaded to the registry, I can use the Cloud Run API console to deploy the container. With the default options set, unauthenticated web access granted, and proper port forwarded, off the service goes. First thing, there is no way to see what the API is doing with the image. The log verbosity is non-existent and the log tab is only for operational logs. So, no actual progress bar whatsoever and you would need to have your fingers crossed that nothing goes wrong. This happened to me the last time when I tried to deploy my &lt;a href=&#34;https://unix.hoanganh.dev&#34;&gt;Unix documentation site&lt;/a&gt;. The deployment went under and I did not know why because the error message was simply a build error because of unsupported architecture. After doing differential testings, I was able to isolate that the problem was due to the base image architecture. See, I was using my M1 MacBook to build and push the image so the base Ubuntu image was on ARM64 architecture. This was subsequently solved by going over the process on my x64 machine.&lt;/p&gt;
&lt;p&gt;Second, there is an option to assign a custom domain to the deployed container and this step is also a major pain. While the assignment of the custom domain went quickly enough, the lack of observability on the progresss is absolutely nerve-wracking due to the undesirably slow DNS propagation and SSL certificate generation. Mind you that I use Cloudflare. So, in my quest to find a better way to do custom domain (because the default &lt;code&gt;*.web.app&lt;/code&gt; is &lt;em&gt;kinda&lt;/em&gt; hard to remember ðŸ¤¡), I stumbled upon Firebase hosting with redirection.&lt;/p&gt;
&lt;h1 id=&#34;firebase-kinda-sucks-now&#34;&gt;Firebase kinda sucks now&lt;/h1&gt;
&lt;p&gt;Now, Firebase is a seemingly separated service component from all the over GCP stuff. But you can connect Firebase to your GCP project. BUT. I didn&amp;rsquo;t know that was a thing, so I naively created a new project with the hope of being able to redirect to the container service of another project ðŸ¤¡. Fumbled around a while, I managed to connect the GCP project of the deployed container to Firebase, but then it automatically upgraded the plan to the Blaze paid plan because &amp;ldquo;extend to use Google Cloud Platform resources&amp;rdquo; for whatever reasons. Well, ok, fine, I can live with that as long as the process takes less time. Boy, was I wrong, as I could not implement the redirection even though I followed the documentations and referenced other deeply nested docs.&lt;/p&gt;
&lt;p&gt;All right, I give up. Let&amp;rsquo;s abandon this and disable the Firebase then. Google says, &amp;ldquo;Fuck no.&amp;rdquo; This project is now permanently attached to the Firebase shit and there are no options to detach. I attempted to downgrade the Firebase to the free plan with hope that it would do the trick only to have it RE-ENABLED automatically by the system. At this point, the last thing to do is to delete the project from Firebase console and you&amp;rsquo;d think that is &amp;ldquo;da wey&amp;rdquo; right? Fuck no, again, you silly goof. Delete the project from Firebase also means your whole Google Cloud Platform project would be deleted. Trying to get support for this shit doesn&amp;rsquo;t work because it is not available for the basic tier support ðŸ¤¡.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;THE FUCK SHIT IS THIS?
I &lt;em&gt;calmly&lt;/em&gt; asked myself and Google.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;last-ditch-efforts&#34;&gt;Last ditch efforts&lt;/h1&gt;
&lt;p&gt;Ok, whatever, then I&amp;rsquo;ll just remove the service accounts in IAM. Wrong again, idiot with a foolish ambition. Removing those automatically created service accounts also somehow messed up the whole Cloud Run API access permissions. Now, I can&amp;rsquo;t even create a new deployment from the web console nor deploy a revision of the containerized app. Trying to solve this via the IAM console is another pain. Google in its infinite engineering wisdom does not provide a clear way of how administrators can manage access of default service agents and their roles. After 1-1.5 hour of reading docs, forums, community pages, I gave up and had to disable the whole API, losing all of my work, and start over.&lt;/p&gt;
&lt;h1 id=&#34;resolution&#34;&gt;Resolution&lt;/h1&gt;
&lt;p&gt;Starting over actually did the trick. The access policies were restored and I was able to re-deploy everything through the web console. HOWEVER, IT DID NOT HAVE TO BE THIS WAY. The time and effort cost was simply unjustified for such simple administrative operation. And it is not like the service is free or anything, I (will) pay for whatever I am consuming, so the shitty docs and non-existent support can go fuck themselves. Twice. Google engineering might be the best, but the customer service and business relation is clearly dogshit. If anything, I will probably sell my soul to Microsoft in the future.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>My Dev Skill Improvement Roadmap for First Half of 2022</title>
      <link>https://blog.aaanh.com/posts/dev-goals-first-half-2022/</link>
      <pubDate>Sun, 06 Mar 2022 00:30:00 +0000</pubDate>
      
      <guid>https://blog.aaanh.com/posts/dev-goals-first-half-2022/</guid>
      <description>Lots to learn with so little time!</description>
      <content>&lt;blockquote&gt;
&lt;p&gt;This is a work in progress&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My tentative goal is to do software engineer in DevOps and SRE. Even though I am familiar with the stacks needed according to &lt;a href=&#34;https://roadmap.sh&#34;&gt;https://roadmap.sh&lt;/a&gt; for a DevOps/SRE, I am admittedly scatterbrained and quite disorganized and impulsive when it comes to actually learning the material. I might slightly be attention deficient, who knows, probably from devouring internet contents at a breakneck speed.&lt;/p&gt;
&lt;p&gt;So, let this post be a place where I get an anchor of some sort to remind what I need to do in order to achieve my mastery in the arts of orchestration (not the musical one!).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I embed the roadmap down here so that we don&amp;rsquo;t need to go back and forth.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;img src=&amp;ldquo;&lt;a href=&#34;https://roadmap.sh/roadmaps/devops.png%22&#34;&gt;https://roadmap.sh/roadmaps/devops.png&amp;quot;&lt;/a&gt; width={{ width: &amp;lsquo;640px&amp;rsquo; }} /&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;owned-skills&#34;&gt;Owned skills&lt;/h2&gt;
&lt;p&gt;I shall list the skill stacks that I have already acquired:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Learn a programming language: (my best 3) c++, python, nodejs&lt;/li&gt;
&lt;li&gt;Understand different OS concepts
&lt;ul&gt;
&lt;li&gt;Process management&lt;/li&gt;
&lt;li&gt;Sockets&lt;/li&gt;
&lt;li&gt;POSIX basics&lt;/li&gt;
&lt;li&gt;Networking concepts&lt;/li&gt;
&lt;li&gt;I/O Management&lt;/li&gt;
&lt;li&gt;Virtualization&lt;/li&gt;
&lt;li&gt;Memory/Storage&lt;/li&gt;
&lt;li&gt;FS&lt;/li&gt;
&lt;li&gt;initd&lt;/li&gt;
&lt;li&gt;systemd&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Managing Servers
&lt;ul&gt;
&lt;li&gt;OS
&lt;ul&gt;
&lt;li&gt;Linux-based: Ubuntu, Debian, RHEL, Arch&lt;/li&gt;
&lt;li&gt;Windows&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Terminal workflow
&lt;ul&gt;
&lt;li&gt;tmux&lt;/li&gt;
&lt;li&gt;bash scripting&lt;/li&gt;
&lt;li&gt;powershell&lt;/li&gt;
&lt;li&gt;editor: vim&lt;/li&gt;
&lt;li&gt;code compilation: gcc, make, gdb&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Local System Monitoring and Process Management
&lt;ul&gt;
&lt;li&gt;ps, top, htop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Networking
&lt;ul&gt;
&lt;li&gt;ping, nmap, tracert, ufw/iptables, dig, netstat&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Text manipulation
&lt;ul&gt;
&lt;li&gt;awk, grep, sed, sort, cat, echo, fmt, wc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web Servers
&lt;ul&gt;
&lt;li&gt;IIS&lt;/li&gt;
&lt;li&gt;Nginx&lt;/li&gt;
&lt;li&gt;Apache2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Networking, Security, and Protocols
&lt;ul&gt;
&lt;li&gt;Email: SMTP, IMAPS, DMARC, SPF, DKIM&lt;/li&gt;
&lt;li&gt;HTTP/S, FTP, SSL/TLS, SSH, port forwarding&lt;/li&gt;
&lt;li&gt;OSI model, DNS, BGP&lt;/li&gt;
&lt;li&gt;Whitelisting, DMZ, Firewall&lt;/li&gt;
&lt;li&gt;Reverse proxy, load balancer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Infrastructure as Code (IaC)
&lt;ul&gt;
&lt;li&gt;Containers: Docker&lt;/li&gt;
&lt;li&gt;Configuration Management: Ansible&lt;/li&gt;
&lt;li&gt;Container Orchestration: Kubernetes&lt;/li&gt;
&lt;li&gt;Provisioning: Terraform&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Infrastructure Monitoring
&lt;ul&gt;
&lt;li&gt;Grafana, Prometheus&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CI/CD
&lt;ul&gt;
&lt;li&gt;Github Actions&lt;/li&gt;
&lt;li&gt;Azure DevOps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Logs Management
&lt;ul&gt;
&lt;li&gt;Splunk&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud Providers
&lt;ul&gt;
&lt;li&gt;Type 1:
&lt;ul&gt;
&lt;li&gt;AWS&lt;/li&gt;
&lt;li&gt;Google Cloud&lt;/li&gt;
&lt;li&gt;Azure&lt;/li&gt;
&lt;li&gt;Heroku&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Type 2:
&lt;ul&gt;
&lt;li&gt;Linode&lt;/li&gt;
&lt;li&gt;Digital Ocean&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;skills-need-to-learn-and-improve&#34;&gt;Skills need to learn and improve&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OS Concepts:
&lt;ul&gt;
&lt;li&gt;Threads and Concurrency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;System Performance:
&lt;ul&gt;
&lt;li&gt;all&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web technologies:
&lt;ul&gt;
&lt;li&gt;WebSockets&lt;/li&gt;
&lt;li&gt;REST api, CRUD&lt;/li&gt;
&lt;li&gt;Webhooks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IaC:
&lt;ul&gt;
&lt;li&gt;Docker (more advanced)&lt;/li&gt;
&lt;li&gt;Ansible (playbook to galaxy)&lt;/li&gt;
&lt;li&gt;Kubernetes (still beginner)&lt;/li&gt;
&lt;li&gt;Terraform (still beginner)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Networking and Security:
&lt;ul&gt;
&lt;li&gt;Reverse proxy (more advanced configs)&lt;/li&gt;
&lt;li&gt;Load balancer (still beginner)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Logs management:
&lt;ul&gt;
&lt;li&gt;Splunk (more!)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CI/CD:
&lt;ul&gt;
&lt;li&gt;Azure DevOps&lt;/li&gt;
&lt;li&gt;Circle CI&lt;/li&gt;
&lt;li&gt;Gitlab CI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud Providers:
&lt;ul&gt;
&lt;li&gt;AWS (backlog)&lt;/li&gt;
&lt;li&gt;Google Cloud (learning Cloud Engineer associate)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I will need to try and complete at least the Google Cloud Engineer associate learning path, reinforce my knowledge on IaC tools and frameworks, learn more about Azure DevOps and Circle CI, and then finally complete a course on REST api framework (nestjs) and kubernetes.&lt;/p&gt;
&lt;p&gt;My goals seem a bit outlandish and probably unachievable and I will probably fail, but at the very least, I have a good image of what I need to do (or so it seems).&lt;/p&gt;
&lt;p&gt;On another note, I am tasked with a benchmark project for MLaaS providers by my research supervisor and so far, looks like it will play well into the whole shenanigans so I will have the chance to improve hollistically. We&amp;rsquo;ll see.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Cloudflare FTW</title>
      <link>https://blog.aaanh.com/posts/cloudflare-ftw/</link>
      <pubDate>Mon, 31 Jan 2022 03:00:00 +0000</pubDate>
      
      <guid>https://blog.aaanh.com/posts/cloudflare-ftw/</guid>
      <description>My whole networking infrastructure is hosted on Cloudflare.</description>
      <content>&lt;blockquote&gt;
&lt;p&gt;Totally not paid to say this. I shill what I (ab)use.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;before&#34;&gt;Before&lt;/h1&gt;
&lt;p&gt;I have been abusing Cloudflare (NYSE: NET) ever since the day I discovered Cloudflare, which is probably 1-2 year(s) ago. I am probably one of the living testaments to why Cloudflare stock ðŸš€ to the ðŸŒ™ in the one-year period. Aside from servers I have physically at home, there are also my distributed infrastructures on various cloud platforms, PaaS like Vercel and Netlify to IaaS like Linode and Compute Engine/EC2/Azure.&lt;/p&gt;
&lt;p&gt;I initially came to Cloudflare for its Domain Name Service back in 2018. Before transferring everything to Cloudflare, the routing scenery was really bleak with pay-as-you-go service providers like routing in Googel Cloud or the Route 52 routing on AWS or from the registrar or from the hosting service. Although those providers offerred either an quick and easy way to route or a granulated control over all the settings, the feature sets were either too simpleton or too complicated or the interface was too cluttered and cumbersome (ðŸ‘€ at you NASDAQ:AMZN).&lt;/p&gt;
&lt;h1 id=&#34;after&#34;&gt;After&lt;/h1&gt;
&lt;p&gt;Initially, the only service that cloudflare provides that I make use of is the DNS. Compared to other providers, Cloudflare, hereforth referred to as &lt;strong&gt;CF&lt;/strong&gt;, provides a more centralized way of managing DNS with a UI that looks like it was actually minted in the modern day with material design. Got a server running on Linode? Route its IP to CF and assign a subdomain of my choice. Got a web application (Nextjs) running on Vercel? Simply route the Vercel nameservers to CF with the proper (sub)domain names. For SSL, most modern PaaS provides the SSL configurations so I only have to flip a switch on CF to enable the HTTPS enforcement. In terms of access, I can create rules for redirecting or blocking access on CF&amp;rsquo;s side instead of doing it on the host configurations, which are prone to misconfiguration and creating security risks.&lt;/p&gt;
&lt;p&gt;Nowadays, CF has a madness amount of services available for free on its platform. I have used a bunch of which and am liking them so far in terms of usability and ease of setup. Especially,one of which I recently discovered and tried with success is the Cloudflare Access.&lt;/p&gt;
&lt;h1 id=&#34;present-day&#34;&gt;Present Day&lt;/h1&gt;
&lt;p&gt;Cloudflare Access is part of CF&amp;rsquo;s newly minted Zero Trust Platform â€” the favorite poster child of a buzzword in the tech scene. During last month (December) seasonal break, I got into discovering CF Access to see what could be &lt;del&gt;abused&lt;/del&gt; leveraged from the spanking new platform/module. To simply describe, CF Access, more hollistically referred to as &amp;lsquo;Zero Trust&amp;rsquo;, is MSFT Azure in a more infantile and watered down form. This means that it is easier to understand what&amp;rsquo;s going on with the platform and I don&amp;rsquo;t get overwhelmed with the amount of information/services it provides, which ultimately leads to my ability to configure CF Access for use. And have I mentioned that it&amp;rsquo;s &lt;strong&gt;free&lt;/strong&gt;? Bet neither Azure nor Google Cloud could do that.&lt;/p&gt;
&lt;p&gt;Who is CFA geared towards? I would say that it&amp;rsquo;s more for small to medium enterprises that don&amp;rsquo;t necessarily require complex access control and networking systems or simply don&amp;rsquo;t have the manpower and the financial means to granually configure a IAM, networking, and directory system from the ground up. The ability to quickly configure these services, albeit at the price of platform immaturity, is even more amplified when the distributive nature of the workplace during and after the pandemic comes into play.&lt;/p&gt;
&lt;h1 id=&#34;my-abuse&#34;&gt;My (Ab)use&lt;/h1&gt;
&lt;p&gt;I have always been enthralled by the idea of having access to my workstation from anywhere. Since my workstation is Windows, the logical quick and easy approach to this would be using the built-in Remote Desktop Protocol routed through a domain name pointing straight at my home IP, assigned by the ISP. This was accomplished with just Cloudflare DNS and port forwarding on the home router. However, this approach is dangerously vulnerable to attacks because 1. The connection cannot proxied through CF DNS and thus exposed to the interweb, 2. Leaking the IP address would create a healthy attack surface for all of my home devices, including my homelab cluster. In other words, it&amp;rsquo;s bad.&lt;/p&gt;
&lt;p&gt;But, that was all I could do. An RDS server would be nice that MSFT is stingy so that costs a fortune for the license. I don&amp;rsquo;t want to do VNC because that means having an extra service running on the background and at startup. I probably could tolerate unproxied connection to the workstation plus implement 2FA when connecting and SSL to strengthen the security? Welp, does not work on personal stuff because those are offerred by the RDS server.&lt;/p&gt;
&lt;p&gt;Last night, I was perusing through CF Access documentation and saw there is an article on how to use a CLI called &lt;a href=&#34;https://github.com/cloudflare/cloudflared&#34;&gt;cloudflared&lt;/a&gt; to set up a Cloudflare Tunnel. Digging deeper, I found out that it supports RDP tunneling and comes with a documentation on how to do it. Jackpot: &lt;a href=&#34;https://developers.cloudflare.com/cloudflare-one/tutorials/rdp&#34;&gt;https://developers.cloudflare.com/cloudflare-one/tutorials/rdp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The way it works is that Cloudflared is run on both the RDP host and the client. This creates a private tunnel with specific ports between the two machines. The host first needs to create an application connection and add ingress for the connection along with the secret key file (generated during the creation process) in the local &lt;code&gt;config.yaml&lt;/code&gt; file. The cloudflared CLI can also create a DNS record specific for this RDP routing. Then, the client can start the tunnel, routing traffic from the RDP port from localhost to target host via the (sub)domain name and the app name. Once the connection to the app on Cloudflare Access is established, the client can start the RDP session.&lt;/p&gt;
&lt;p&gt;The extremely cool thing about this setup is that RDP connection must be authenticated through CF Access and since I have added several oauth authentication strategies on the admin panel, I could either sign in on the browser any strategy, e.g. Github, Google, etc. Once I&amp;rsquo;m signed in, the authentication is verified and the RDP session can start.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a diagram I cooked up in 5 minutes to illustrate what happens.&lt;/p&gt;
&lt;p&gt;&amp;lt;img
src=&amp;ldquo;&lt;a href=&#34;https://lh3.googleusercontent.com/pw/AM-JKLW_Sw3s-3yNsSWKyMUg0WGRHSLLgGwunEh3HqADw2ki425HQJC8cbeLSkdYw4bfvMNBPMDBUA8QAWgkRAFyeMCPV9ErmY2jM2rBgJjJzcKsz93fWun2c6dWQhrlTgWwTy_dta9oq-1xFJxFh2bdrGsOVw=w2198-h1230-no?authuser=0%22&#34;&gt;https://lh3.googleusercontent.com/pw/AM-JKLW_Sw3s-3yNsSWKyMUg0WGRHSLLgGwunEh3HqADw2ki425HQJC8cbeLSkdYw4bfvMNBPMDBUA8QAWgkRAFyeMCPV9ErmY2jM2rBgJjJzcKsz93fWun2c6dWQhrlTgWwTy_dta9oq-1xFJxFh2bdrGsOVw=w2198-h1230-no?authuser=0&amp;quot;&lt;/a&gt;
style={{ width: &amp;lsquo;640px&amp;rsquo; }}
/&amp;gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Self-hosted: Go big or go... home?</title>
      <link>https://blog.aaanh.com/posts/selfhosted/</link>
      <pubDate>Wed, 25 Aug 2021 14:30:00 +0000</pubDate>
      
      <guid>https://blog.aaanh.com/posts/selfhosted/</guid>
      <description>Cloudy with a chance of hosting</description>
      <content>&lt;h2 id=&#34;preface&#34;&gt;Preface&lt;/h2&gt;
&lt;p&gt;Deployment is like a drug. Once you get that first taste of starting up a server and expose it to the interweb where you could practically access it anywhere, you will never be able to stop. I know that I have grown addicted to all this ever since my first deployment on AWS EC2 (which drained my pocket dry for some months). I had to shut down my websites and web services for a year or so. Then, the new age of the interweb finally reached and enlightened me. The spawn of free web application deployment and hosting services, like Gatsby and Vercel, and the shining jewel of affordable webhosting Linode had once again lit a fire under my butt.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-a-code-server&#34;&gt;Setting up a code server&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://code.hoanganh.tech&#34;&gt;Code Server (Password-protected)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Code server, in a nutshell, is a visual studio code environment that is hosted on a remote server and accessed through client server. The code server is installed on a Linux-based OS with the Linux shell exposed so that many of the software development processes can be run natively. Although there are some catches when using a custom domain name like I do, such as front-end web frameworks and backend webapp servers that utilizes the localhost:&amp;lt;port&amp;gt; to serve the development build requires additional setups. And I skip the hassle of setting up the correct port forwardings because I only use it for code editing anyway, while the deployment preview is handled by external services that pull and from github pushes and commits.&lt;/p&gt;
&lt;p&gt;The best use case of having a code server is that you can basically (edit) code anywhere without going through the strenuous process of setting up a local development environment on whatever temporary platform you use.&lt;/p&gt;
&lt;p&gt;See the code server running on Chrome below:&lt;/p&gt;
&lt;p&gt;&amp;lt;img
src=&amp;ldquo;&lt;a href=&#34;https://lh3.googleusercontent.com/AdEHpUUTC1BK7Smsg4jAi3cEadKR6qtvv0GMxtVRui0L83viwc7A6NlZveuzMJI2Hd5d_oBX4gRwMg0_BzbjQaCOa4CbznC8KXe9LiqE4bq4uFZ9OwQsc0dbAPmjCbrxBTOiCxVQ84e8HeqMdkuzqE2IQjImKGnOq0wL4oxwnYIr838DDx_I4vPrl5msL7hY9ILB83IRlnKseezX9OVDZSBEWcjhivPIPZyg8txP5QrMYutczM7AeNBrUhi8W-rfKdzn1SoC5rd_PklmpUZann-XQYYa1yc_rBL7hUEaLas0fGw9kWpC50GyGFW-tbnQ_7ehpk1lj4M2QLRV3Fmyb-BuRM63M8l9R4a_FWEikzDb-JLl8fGAyw9AQOy_q4f0Q5Q_3hRaHCeFsjJQFdQM3i_9ijeGH05MyrmApQO-PAipaawP9S9OQGNG3ux6T5Ay4aNFBVXA-7v3zi9eGlwMeGJ0kpIfMxcHy-EwwtfUSEXpeXD1fhfCSL8jL8vuGGyWrd-Y5wlMESFlEo1PYpiZRIp78fctCTfeU2Jss9JExK2VhTNr4Ub_h8ojNc7ume7Hxojh1rkLAttg2xw7xC6_hmApy4KY7f__qA7CbbRdiLW3H2aQifMlIFmMfIzaZ2DgEOdofpjynRJ198WsbZrD3CXwDPiV_BnPNpoEqLy6VcUfneL82B5Rs92O3h52sdi4OqtmJzjjWVKcXRYI_9JZoXvnhQ=w1920-h1080-no?authuser=0%22&#34;&gt;https://lh3.googleusercontent.com/AdEHpUUTC1BK7Smsg4jAi3cEadKR6qtvv0GMxtVRui0L83viwc7A6NlZveuzMJI2Hd5d_oBX4gRwMg0_BzbjQaCOa4CbznC8KXe9LiqE4bq4uFZ9OwQsc0dbAPmjCbrxBTOiCxVQ84e8HeqMdkuzqE2IQjImKGnOq0wL4oxwnYIr838DDx_I4vPrl5msL7hY9ILB83IRlnKseezX9OVDZSBEWcjhivPIPZyg8txP5QrMYutczM7AeNBrUhi8W-rfKdzn1SoC5rd_PklmpUZann-XQYYa1yc_rBL7hUEaLas0fGw9kWpC50GyGFW-tbnQ_7ehpk1lj4M2QLRV3Fmyb-BuRM63M8l9R4a_FWEikzDb-JLl8fGAyw9AQOy_q4f0Q5Q_3hRaHCeFsjJQFdQM3i_9ijeGH05MyrmApQO-PAipaawP9S9OQGNG3ux6T5Ay4aNFBVXA-7v3zi9eGlwMeGJ0kpIfMxcHy-EwwtfUSEXpeXD1fhfCSL8jL8vuGGyWrd-Y5wlMESFlEo1PYpiZRIp78fctCTfeU2Jss9JExK2VhTNr4Ub_h8ojNc7ume7Hxojh1rkLAttg2xw7xC6_hmApy4KY7f__qA7CbbRdiLW3H2aQifMlIFmMfIzaZ2DgEOdofpjynRJ198WsbZrD3CXwDPiV_BnPNpoEqLy6VcUfneL82B5Rs92O3h52sdi4OqtmJzjjWVKcXRYI_9JZoXvnhQ=w1920-h1080-no?authuser=0&amp;quot;&lt;/a&gt;
style={{ width: &amp;lsquo;630px&amp;rsquo; }}
/&amp;gt;&lt;/p&gt;
&lt;p&gt;Setting up a code server is rather easy. There are many tutorials on Google search results I have tried that work perfectly. But since I have already joined the cult of Linode, I simply spin up a code server template from Linode&amp;rsquo;s marketplace. The process probably took at most 10 minutes, while the SSL cert was the more PITA thing to do.&lt;/p&gt;
&lt;h2 id=&#34;the-minecraft-server&#34;&gt;The Minecraft server&lt;/h2&gt;
&lt;p&gt;(TBA)&lt;/p&gt;
&lt;h2 id=&#34;the-vpn-servers&#34;&gt;The VPN servers&lt;/h2&gt;
&lt;p&gt;(TBA)&lt;/p&gt;
&lt;h2 id=&#34;the-homelab&#34;&gt;The Homelab&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://linux.hoanganh.tech&#34;&gt;Currently serving a static HTML on &lt;code&gt;linux.hoanganh.tech&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;&#34;&gt;ssh and xrdp can be accessed through &lt;code&gt;homelab.hoanganh.tech&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hosting a homeserver at home that is accessible to the interweb requires your ISP to provide you with a static IP, which was impossible before at my previous apartment because I was not the internet account holder nor was the router placed in my room. Now, I am able to reserve my own IP to the interweb, route that through Cloudflare et voila.&lt;/p&gt;
&lt;p&gt;In details, it was a bit more complicated. Currently, I have 2 ports forwarded for Remote Desktop Protocol, one for my Linux server GUI and one for my Windows workstation, which are pointed at by 2 CNAMEs configured on Cloudflare: &lt;code&gt;homelab.hoanganh.tech&lt;/code&gt; and &lt;code&gt;home.hoanganh.tech&lt;/code&gt;. Then, a third CNAME, &lt;code&gt;linux.hoanganh.tech&lt;/code&gt;, points to the static web server nginx running on the same Linux server. Introduce the brainfuckery, they are all routed through 1 single IP provided by the Internet Service Provider (ISP). So, for each of these servers/services, I must use separate port. For example, (X)RDP on Linux server is forwarded to port 0001, RDP on Windows is 0002, HTTP on Linux is 80(80), and HTTPS on Linux is 443, and so forth. Took me a while to figure that out and configure on my local machines, on the ISP router portal, and on Cloudflare.&lt;/p&gt;
&lt;h2 id=&#34;the-mail-server&#34;&gt;The mail server&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;mailto:iam@hoanganh.tech&#34;&gt;&lt;code&gt;iam(at)hoanganh(dot)tech&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Initially, I set up the domain with Zoho mail. But because I don&amp;rsquo;t use any of the services that Zoho offers, I migrated everything to Google&amp;rsquo;s G Suite (now Google Workspace). The setup was painless. All I needed to do is copy-paste some MX and DKIM values provided by Google and onto Cloudflare DNS.&lt;/p&gt;
&lt;p&gt;Well, there&amp;rsquo;s always a catch, isn&amp;rsquo;t it? The catch for migration is actually migrating old emails from iCloud and Zoho servers to their new home on Google Workspace. First of all, I have to add the Zoho account to Thunderbird client. Then, I retrieve all the mails from the Zoho account. Finally, I export them to file which I then upload to Gmail. Now, for the iCloud mail, I use the Mail app on macOS to export all mails, which took a day, then upload the exported file to Gmail. Boom. Done.&lt;/p&gt;
&lt;p&gt;The Google Workspace plan that I use is the Business Standard which the following perks:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/U6Yos6bn1ATdLNzTKgvaqNkb11lKri1icGeweG_zcim0HFuKMfNq2yaGYiDSvJd_wDI9yr_EKd5SSZ8X8No26MwqeNK6SsKo5kAESxBwxTfUwakEmcHWBvar6Um__skEa-pl5OR7lx6t6qk3BRPKzyCM8wbagWBEzc4c4VRlPbHsxHnPJxdsrE6M90kUBHrp9lv9fMef5zQQfyvFtjDKcbC9wktWsVNC_lbpBe_bAOrPileSCQxYpKbLF_uCnamaQl3zkfProuxYxs1XuWyrDjwd8w8Z1nL1KG1mTIiUuWr6zMUrDdjJx-GyYicUVoamSf1RowUMmcgsQG-A9k6TAB8Le7YvKtm-wxFJSEB9BEKGzVHT2orhYc6VWWBwZ0ypFoyN4YiFopIFPvuusuVyYM_ywohJhUtn49dyoPGAo0C3cvynbIEVaCvRwE9T0tKPuOxWr9RkuNQIH2ZOF1Kf7Fb-h1tKlH1pPtnjhlBCI_KNRELCvOfHtjHwCL8lChUJQpj4mYyS_g1XHdkQ7MJYZibvKzDKLCmWHz33YHuK7WVYtuJebPVa6luU_NdNFzN-oLB5xp3BkzERStn7HCFUwisgzYxq_9nDYQICQlmM1zY_GvGot3y4OGi4nTzxj_RG7eP5A_-gCibYO4tqFVP1Dj7FJE-NgOCNqxjqQZUOuwY5ctseuh1gHqO3c12Vz-jS51H214LWntSCkGF4kdKjDrsLaA=w576-h1354-no?authuser=0&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;My target is to get the 2TB of cloud storage so that I could store my po&amp;hellip; photos and videos of cats. In all seriousness, mainly important documents and auto HQ photo backup. I might switch to the Business Starter plan which costs half the price, but 2TB is really nice to have.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
